# vim: tabstop=4 shiftwidth=4 softtabstop=4
# Copyright 2012 by Fred Hsu fredlhsu at gmail dot com
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
# @author: Fred Hsu

import quantum.db.api as db
from quantum.common import exceptions as q_exc
from quantum.common.config import find_config_file
from quantum.plugins.floodlight import ofp_service_type
from quantum.plugins.floodlight import ovs_quantum_plugin_base
from quantum.plugins.floodlight.db import api as db_api


#from ryu.app import client
#from ryu.app import rest_nw_id
import client
import ovs_db


CONF_FILE = find_config_file({"plugin": "floodlight"}, None, "floodlight.ini")



class VlanMap(object):
    vlans = {}
    net_ids = {}
    free_vlans = set()

    def __init__(self):
        self.vlans.clear()
        self.net_ids.clear()
        self.free_vlans = set(xrange(2, 4094))

    def set_vlan(self, vlan_id, network_id):
        self.vlans[vlan_id] = network_id
        self.net_ids[network_id] = vlan_id

    def acquire(self, network_id):
        if len(self.free_vlans):
            vlan = self.free_vlans.pop()
            self.set_vlan(vlan, network_id)
            # LOG.debug("VlanMap::acquire %s -> %s", x, network_id)
            return vlan
        else:
            raise Exception("No free vlans..")

    def get(self, vlan_id):
        return self.vlans.get(vlan_id, None)

    def release(self, network_id):
        vlan = self.net_ids.get(network_id, None)
        if vlan is not None:
            self.free_vlans.add(vlan)
            del self.vlans[vlan]
            del self.net_ids[network_id]
            # LOG.debug("VlanMap::release %s", vlan)
        else:
            LOG.error("No vlan found with network \"%s\"", network_id)


class OFPFloodlightDriver(ovs_quantum_plugin_base.OVSQuantumPluginDriverBase):
    def __init__(self, config):
        super(OFPFloodlightDriver, self).__init__()

        self.vmap = VlanMap()
        # Populate the map with anything that is already present in the
        # database
        vlans = ovs_db.get_vlans()
        for x in vlans:
            vlan_id, network_id = x
            LOG.debug("Adding already populated vlan %s -> %s" % (vlan_id, network_id))
            self.vmap.set_vlan(vlan_id, network_id)
        of_con_host = config.get("OVS", "openflow-controller")
        #ofp_api_host = config.get("OVS", "openflow-rest-api")

        if ofp_con_host is None or ofp_api_host is None:
            raise q_exc.Invalid("invalid configuration. check floodlight.ini")

        # TODO: Do I need to store the OF hosts in the db?
        #hosts = [(ofp_con_host, ofp_service_type.CONTROLLER),
        #         (ofp_api_host, ofp_service_type.REST_API)]
        #db_api.set_ofp_servers(hosts)
        # Store the OF controller info in the client
        self.client = client.FLClient(of_con_host)
        #self.client = client.OFPClient(ofp_api_host)
        #self.client.update_network(rest_nw_id.NW_ID_EXTERNAL)

        # register known all network list on startup
        #  - Maybe I don't need this since I'm adding vlans 
        #  - from above?
        # self._create_all_tenant_network()

    def _create_all_tenant_network(self):
        networks = db.network_all_tenant_list()
        for net in networks:
            #self.client.update_network(net.uuid)
            # TODO: need to make client update networks

    def create_network(self, net):
        vlan_id = self.vmap.acquire(str(net.uuid))
        ovs_db.add_vlan_binding(vlan_id, str(net.uuid))
        # add flows for the vlan
        # TODO: Does this need to be called from _init_?
        self.client.create_flows(switch_id, vlan_id, in_port, uplink)

    def delete_network(self, net):
        #self.client.delete_network(net.uuid)
        # TODO:  remove flows for the vlan 
        ovs_db.remove_vlan_binding(net_id)
        self.vmap.release(net_id)

class FloodlightQuantumPlugin(ovs_quantum_plugin_base.OVSQuantumPluginBase):
    def __init__(self, configfile=None):
        super(FloodlightQuantumPlugin, self).__init__(CONF_FILE, __file__, configfile)
        self.driver = OFPFloodlightDriver(self.config)
