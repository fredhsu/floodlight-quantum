#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright 2012 Fred Hsu <fredlhsu at gmail dot com>
# Based on openvswitch agent.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
# @author: Fred Hsu

import ConfigParser
import logging as LOG
import shlex
import signal
import sys
import time
from optparse import OptionParser
from sqlalchemy.ext.sqlsoup import SqlSoup
from subprocess import PIPE, Popen
from vifport import VifPort

#from ryu.app import rest_nw_id
#from ryu.app.client import OFPClient
# TODO: import my db - db gets passed in
from client import FLClient
from ovsbridge import OVSBridge

OP_STATUS_UP = "UP"
OP_STATUS_DOWN = "DOWN"

class OVSQuantumOFPFloodlightAgent:
    def __init__(self, integ_br, db, root_helper):
        self.root_helper = root_helper
        (ofp_controller_addr, ofp_rest_api_addr) = check_ofp_mode(db)

        #self.nw_id_external = rest_nw_id.NW_ID_EXTERNAL
        # TODO
        #self.api = OFPClient(ofp_rest_api_addr)
        # TODO: May need to split out the ip from controller addr: "tcp:<ip>"
        # What format is controller addr in?
        self.api = FLClient(ofp_controller_addr)
        self._setup_integration_br(integ_br, ofp_controller_addr)

    def _setup_integration_br(self, integ_br, ofp_controller_addr):
        self.int_br = OVSBridge(integ_br, self.root_helper)
        self.int_br.find_datapath_id()
        self.int_br.set_controller(ofp_controller_addr)
        # ** after setting the contoller, now points to floodlight
        # ** Floodlight will already be setup as learning switch
        # ** Or easy way is to let OVS handle VLAN tagging just assign
        # ** Ports to VLANs and use a local database to keep track
        # Go through each external port on the int_br and update it
        # do I need to do the above?
        #for port in self.int_br.get_external_ports():
        #    self._port_update(self.nw_id_external, port)

    def _port_update(self, network_id, port, db):
        # Should send JSON request to floodlight with VLAN, port
        # uplink/external port, name, and switch id
        #self.api.update_port(network_id, port.switch.datapath_id, port.ofport)
        # TODO need to update a port on the OF controller?
        # Use same call as above, client will do mapping of network_id to vlan
        vlan_id = db.get_vlan(network_id)
        # create a flow for each uplink port from the source port
        for uplink in self.int_br.get_external_ports():
            self.api.create_flows(integ_br.datapath_id, vlan_id, port, uplink, integ_br.br_name)

    def _all_bindings(self, db):
        """return interface id -> port which include network id bindings"""
        return dict((port.interface_id, port) for port in db.ports.all())

    def daemon_loop(self, db):
        # on startup, register all existing ports
        all_bindings = self._all_bindings(db)

        local_bindings = {}
        vif_ports = {}
        # Go through vif ports (as opposed to external ports)
        # So do I need to track the MAC address of each VIF port and what 
        # VLAN it is in?  Or is that already taken care of?
        # vif port is tied to net_id, could use that and
        # install flows here based on vif ports and their
        # mac addresses
        # Need to get external port so that can send the info to controller
        for port in self.int_br.get_vif_ports():
            # maps vif_id to a port
            vif_ports[port.vif_id] = port
            if port.vif_id in all_bindings:
                net_id = all_bindings[port.vif_id].network_id # get the net_id for the port
                local_bindings[port.vif_id] = net_id
                self._port_update(net_id, port, db) # calling update which will call the client
                all_bindings[port.vif_id].op_status = OP_STATUS_UP
                LOG.info("Updating binding to net-id = %s for %s",
                         net_id, str(port))
        db.commit() # commit changes to the ports, mainly that they are up

        old_vif_ports = vif_ports
        old_local_bindings = local_bindings

        while True:
            all_bindings = self._all_bindings(db)

            # all_bindings will hold the port from the database
            # key is port.interface_id
            try:
                ports = db.ports.all()
            except:
                ports = []
            for port in ports:
                all_bindings[port.interface_id] = port

            # vlan_bindings will hold all vlan_ids from db
            # key is network id
            vlan_bindings = {}
            try:
                vlan_binds = db.vlan_bindings.all()
            except:
                vlan_binds = []
            for bind in vlan_binds:
                vlan_bindings[bind.network_id] = bind.vlan_id

            new_vif_ports = {}
            new_local_bindings = {}

            #going through all vif ports on ovs
            for port in self.int_br.get_vif_ports():
                new_vif_ports[port.vif_id] = port
                # if the port was stored in the db with a binding
                # create an entry in new_local_bindings for the port
                # and store the net_id
                if port.vif_id in all_bindings:
                    net_id = all_bindings[port.vif_id].network_id
                    new_local_bindings[port.vif_id] = net_id

                old_b = old_local_bindings.get(port.vif_id)
                new_b = new_local_bindings.get(port.vif_id)
                # if this is not a new entry just continue
                if old_b == new_b:
                    continue

                if not old_b:
                    LOG.info("Removing binding to net-id = %s for %s",
                             old_b, str(port))
                    if port.vif_id in all_bindings:
                        all_bindings[port.vif_id].op_status = OP_STATUS_DOWN
                if not new_b:
                    if port.vif_id in all_bindings:
                        all_bindings[port.vif_id].op_status = OP_STATUS_UP
                    LOG.info("Adding binding to net-id = %s for %s",
                             new_b, str(port))

            for vif_id in old_vif_ports:
                if vif_id not in new_vif_ports:
                    LOG.info("Port Disappeared: %s", vif_id)
                    if vif_id in all_bindings:
                        all_bindings[vif_id].op_status = OP_STATUS_DOWN

            old_vif_ports = new_vif_ports
            old_local_bindings = new_local_bindings
            db.commit()
            time.sleep(2)


def main():
    usagestr = "%prog [OPTIONS] <config file>"
    parser = OptionParser(usage=usagestr)
    parser.add_option("-v", "--verbose", dest="verbose",
      action="store_true", default=False, help="turn on verbose logging")

    options, args = parser.parse_args()

    if options.verbose:
        LOG.basicConfig(level=LOG.DEBUG)
    else:
        LOG.basicConfig(level=LOG.WARN)

    if len(args) != 1:
        parser.print_help()
        sys.exit(1)

    config_file = args[0]
    config = ConfigParser.ConfigParser()
    try:
        config.read(config_file)
    except Exception, e:
        LOG.error("Unable to parse config file \"%s\": %s",
                  config_file, str(e))

    integ_br = config.get("OVS", "integration-bridge")

    root_helper = config.get("AGENT", "root_helper")

    options = {"sql_connection": config.get("DATABASE", "sql_connection")}
    db = SqlSoup(options["sql_connection"])

    LOG.info("Connecting to database \"%s\" on %s",
             db.engine.url.database, db.engine.url.host)
    plugin = OVSQuantumOFPFloodlightAgent(integ_br, db, root_helper)
    plugin.daemon_loop(db)

    sys.exit(0)


if __name__ == "__main__":
    main()
